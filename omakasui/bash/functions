# SSH key management
ssh-key-put() {
  if [ "$#" -ne 1 ]; then
    echo "Usage: ssh-key-put <user@host> <optional:path_to_key (default: ~/.ssh/id_ed25519.pub)>"
    return 1
  fi

  if [ -n "$2" ]; then
    local SSH_KEY="$2"
  else
    local SSH_KEY="$HOME/.ssh/id_ed25519.pub"
  fi

  cat ~/.ssh/id_ed25519.pub | ssh "$1" "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >>  ~/.ssh/authorized_keys";
}

# Generate a changelog between two git tags
create_gh_changelog() {
  if [ $# -ne 2 ]; then
    echo "Usage: create_gh_changelog <from-tag> <to-tag>"
    return 1
  fi

  local base=$1
  local head=$2

  local repo
  repo=$(gh repo view --json nameWithOwner -q .nameWithOwner)

  gh api repos/$repo/compare/$base...$head \
    --jq '.commits[] |
      "* \(
          .commit.message
          | split("\n")[0]
          | sub("^(feat|fix|chore|refactor|test|docs|style|ci|build)(\\(.+\\))?:\\s*"; "")
        ) by @\(.author.login // "unknown")"'
}

# Change directory and open in VS Code
cdc() {
  if [ $# -ne 1 ]; then
    echo "Usage: cdc <path-to-project>"
    return 1
  fi

  if ! command -v code &> /dev/null; then
    echo "Error: VS Code is not installed"
    return 1
  fi

  cd $1 && code . && exit
}

# Start a simple HTTP server
webserver() {
  # Show usage if -h is passed
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: webserver [-b] [port] [directory]"
    echo "  -b: Open default browser on <port>"
    echo "  port: Port number (default: 8000)"
    echo "  directory: Directory to serve (default: current directory)"
    return 0
  fi

  local open_browser=false
  if [[ "$1" == "-b" ]]; then
    open_browser=true
    shift
  fi

  local port=${1:-8000}
  local dir=${2:-.}

  if [ ! -d "$dir" ]; then
    echo "Error: Directory '$dir' does not exist"
    return 1
  fi

  # Check if port is already in use
  if lsof -i :$port >/dev/null 2>&1; then
    echo "Error: Port $port is already in use"
    return 1
  fi

  if [ "$open_browser" = true ]; then
    open "http://localhost:$port"
  fi

  python3 -m http.server $port --directory $dir
}

# Create migration file
create_migration() {
  # Show usage if -h is passed
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: create_migration [optional:migrations_directory] [optional:migration_name]"
    echo "  migrations_directory: Directory to store migration files (default: current location)"
    echo "  migration_name: Name of the migration file (default: last git commit timestamp)"
    return 0
  fi

  local migrations_dir="${1:-.}"
  local migration_name="${2:-$(git log -1 --format=%cd --date=unix)}.sh"

  if [ ! -d "$migrations_dir" ]; then
    echo "Error: Migrations directory '$migrations_dir' does not exist"
    return 1
  fi

  local migration_file="$migrations_dir/$migration_name"
  touch $migration_file
  $EDITOR $migration_file
}